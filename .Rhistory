# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- dist(train, method = "euclidean", p = 2)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
install.packages("knn.predict")
install.packages("CRAN")
install.packages("kodama")
install.packages("KODAMA")
library(KODAMA)
# examining the dataset
dim(ds)
head(ds)
summary(ds)
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(1)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, -seq(1, ncol(ds)-1, by=1)] <- scale(ds[, -seq(1, ncol(ds)-1, by=1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- dist(train, method = "euclidean", p = 2)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == factor(test$spam))/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train, method = "euclidean", p = 2)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train, method = "manhattan", p = 2)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train, method = "manhattan")
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train, dist.meth = "manhattan")
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train, dist.meth = "euclidean", p = 2)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
install.packages("KODAMA")
install.packages("KODAMA")
library(KODAMA)
help(KODAMA)
library(knn.predict)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
knn.manh.1 <- knn.kodama(train, test, train$spam, dist.manh, k=1)
library(FNN)
require(devtools)
install(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_version("KODOMA", version = "1.0", repos = "http://cran.us.r-project.org")
library(KODOMA)
# examining the dataset
dim(ds)
head(ds)
summary(ds)
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(1)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, -seq(1, ncol(ds)-1, by=1)] <- scale(ds[, -seq(1, ncol(ds)-1, by=1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
knn.manh.1 <- knn.kodama(train, test, train$spam, dist.manh, k=1)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
# Set the working directory
setwd("D:/Fax/Winter 2019 - 2020/Statistical Principles of Data Science/Homework/Homework 4/")
# loading data
ds <- read.table("spambase.csv", header=FALSE, sep=",",col.names = readLines("names.csv"))
# importing necessary libraries
install.packages("class")
library(class)
install.packages("devtools")
install.packages("devtools")
detach("package:FNN", unload = TRUE)
install.packages("devtools")
library(devtools)
install_version("KODOMA", version = "1.0", repos = "http://cran.us.r-project.org")
install_version("KODOMA", version = "1.0", repos = "http://cran.us.r-project.org")
install.packages("rtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_version("KODOMA", version = "1.0", repos = "http://cran.us.r-project.org")
install_version("KODOMA", version = "1.0", repos = "http://cran.us.r-project.org")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/KODAMA/KODAMA_0.0.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
install.packages(packageurl)
install.packages(packageurl, repos=NULL, type="source")
install.packages("e1071")
install.packages("plsgenomics")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/KODAMA/KODAMA_0.0.1.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
library(KODOMA)
library(KODAMA)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
# Set the working directory
setwd("D:/Fax/Winter 2019 - 2020/Statistical Principles of Data Science/Homework/Homework 4/")
# loading data
ds <- read.table("spambase.csv", header=FALSE, sep=",",col.names = readLines("names.csv"))
# examining the dataset
dim(ds)
head(ds)
summary(ds)
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(1)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, -seq(1, ncol(ds)-1, by=1)] <- scale(ds[, -seq(1, ncol(ds)-1, by=1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == factor(test$spam))/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
knn.manh.1 <- knn.predict(train, test, train$spam, dist.manh, k=1)
train.features <- train[, -seq(1, ncol(ds)-1, by=1)]
train.labels <- train[,-1]
knn.manh.1 <- knn.predict(train[-c(ncol(traib))], test, train$spam, dist.manh, k=1)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train)
train.features <- train[, -seq(1, ncol(ds)-1, by=1)]
train.labels <- train[, -1]
test.features <- test[, -seq(1, ncol(ds)-1, by=1)]
test.labels <- test[, -1]
knn.manh.1 <- knn.predict(train.features, test, ttrain.labels, dist.manh, k=1)
knn.manh.1 <- knn.predict(train.features, test, train.labels, dist.manh, k=1)
knn.manh.1 <- knn.predict(train.features, test.features, train.labels, dist.manh, k=1)
dim(train.features)
train.features <- train[, seq(1, ncol(ds)-1, by=1)]
train.labels <- train[, -1]
test.features <- test[, seq(1, ncol(ds)-1, by=1)]
test.labels <- test[, -1]
knn.manh.1 <- knn.predict(train.features, test.features, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == factor(test$spam))/test.num))
knn.manh.1 <- knn.predict(train.features, test.features, train.labels, dist.manh, k=1)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train.features)
train.features <- train[, seq(1, ncol(ds)-1, by=1)]
train.labels <- train[, -1]
test.features <- test[, seq(1, ncol(ds)-1, by=1)]
test.labels <- test[, -1]
knn.manh.1 <- knn.predict(train.features, test.features, train.labels, dist.manh, k=1)
dim(train)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
dist.manh <- knn.dist(train.features)
knn.manh.1 <- knn.predict(train.features, test.features, train.labels, dist.manh, k=1)
knn.manh.1 <- knn.predict(train.features, test.features, factor(train.labels), dist.manh, k=1)
knn.manh.1 <- knn.predict(train.features, test.features, factor(train.labels, labels = c("no", "yes")), dist.manh, k=1)
knn.manh.1 <- knn.predict(train_samples, -train.samples, factor(train.labels, labels = c("no", "yes")), dist.manh, k=1)
knn.manh.1 <- knn.predict(train.samples, -train.samples, factor(train.labels, labels = c("no", "yes")), dist.manh, k=1)
test.samples <- seq(1:nrow(ds))[-train.samples]
length(test.samples)
test.samples[1]
test.samples[1:5]
train.samples[1:5]
1 in train.samples
1 isin train.samples
knn.manh.1 <- knn.predict(train.samples, test.samples, factor(train.labels, labels = c("no", "yes")), dist.manh, k=1)
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(ds.features)
knn.manh.1 <- knn.predict(train.samples, test.samples, factor(train.labels, labels = c("no", "yes")), dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == factor(test$spam))/test.num))
test.labels <- test[, -1]
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(ds.features)
knn.manh.1 <- knn.predict(train.samples, test.samples, train.labels, dist.manh, k=1)
train.labels
train.labels <- train[, -1]
train.labels <- train[, -1]
train.labels
ds[, -1]
ds[-1,]
dim(ds[-1,])
dim(ds[,-1])
dim(ds[, nrow(ds)])
dim(ds[, nrow(ds) - 1])
dim(ds[, ncol(ds)])
ds[, ncol(ds)]
ds[1:10, ncol(ds)]
# Set the working directory
setwd("D:/Fax/Winter 2019 - 2020/Statistical Principles of Data Science/Homework/Homework 4/")
# loading data
ds <- read.table("spambase.csv", header=FALSE, sep=",",col.names = readLines("names.csv"))
# examining the dataset
dim(ds)
head(ds)
summary(ds)
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(1)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
test.samples <- seq(1:nrow(ds))[-train.samples]
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, -seq(1, ncol(ds)-1, by=1)] <- scale(ds[, -seq(1, ncol(ds)-1, by=1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
# loading data
ds <- read.table("spambase.csv", header=FALSE, sep=",",col.names = readLines("names.csv"))
d
head(ds)
summary(ds)
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(1)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
test.samples <- seq(1:nrow(ds))[-train.samples]
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, 1:(ncol(ds)-1)] <- scale(ds[, 1:(ncol(ds)-1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
ds[1]
ds[1,]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
test.num
sum(knn.stand.1 == factor(test$spam))
1312/1381
ds[1, ncol(ds)]
ds[1 :10, ncol(ds)]
ds[1 :100, ncol(ds)]
ds[1 :1000, ncol(ds)]
sum(train[,ncol(train)])
dim(train)
sum(train$spam)
sum(knn.stand.1)
sum(c(knn.stand.1))
sum(test$spam)
knn.stand.1[1:100]
sum(test$spam == knn.stand.1)
sum(test$spam[1:100] == knn.stand.1[1:100])
sum(test$spam[1:1000] == knn.stand.1[1:1000])
sum(test$spam)
sum(knn.stand.1$spam)
sum(knn.stand.1)
sum(c(knn.stand.1))
length(knn.stand.1)
knn.stand.1[1:10]
knn.stand.1[10:20]
knn.stand.1[10:30]
knn.stand.1[10:50]
sum(knn.stand.1 == 1)
summary (ds)
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=5)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=3)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=3)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == factor(test$spam))/test.num))
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == test$spam)/test.num))
train[1]
dim(train)
ds.names
colnames(ds)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
dim(train)
dim(test)
sum(test)
sum(test$spam)
523/1381
sum(knn.stand.1 == test$spam)
35 * 35
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=60)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == test$spam)/test.num))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(2)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
test.samples <- seq(1:nrow(ds))[-train.samples]
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
ds[, 1:(ncol(ds)-1)] <- scale(ds[, 1:(ncol(ds)-1)], center=TRUE, scale=TRUE)
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == test$spam)/test.num))
# loading data
ds <- read.table("spambase.csv", header=FALSE, sep=",",col.names = readLines("names.csv"))
# checking proportion of spam mail
prop.spam <- sum(ds$spam) / dim(ds)[1]
print(paste(round(prop.spam * 100, 2), "% of emails in the data set are spam."))
# splitting the data set into test and train
# setting seed to make results reproducible
set.seed(2)
num.train <- floor(0.7 * nrow(ds))
train.samples <- sample.int(n = nrow(ds), size = num.train, replace = FALSE)
test.samples <- seq(1:nrow(ds))[-train.samples]
train <- ds[train.samples, ]
test  <- ds[-train.samples, ]
train.num <- dim(train)[1]
test.num <- dim(test)[1]
# let's try default R's knn without any modifications of parameters or data
knn.default <- knn(train, test, cl=factor(train$spam), k=1)
# checking accuracy on test set
print(paste("Accuracy on test set for knn.default = ",
sum(knn.default == factor(test$spam))/test.num))
train[, 1:(ncol(ds)-1)] <- scale(train[, 1:(ncol(ds)-1)], center=TRUE, scale=TRUE)
test[, 1:(ncol(ds)-1)] <- scale(test[, 1:(ncol(ds)-1)], center=TRUE, scale=TRUE)
knn.stand.1 <- knn(train, test, cl=factor(train$spam), k=1)
print(paste("Accuracy on test set for knn.stand.1 = ",
sum(knn.stand.1 == test$spam)/test.num))
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
train.labels <- train[, ncol(train)]
test.labels <- test[, ncol(test)]
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(ds.features)
knn.manh.1 <- knn.predict(train.samples, test.samples, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == factor(test$spam))/test.num))
sum(knn.manh.1)
knn.manh.1[1:10]
dist.manh
dist.manh[1:5, ]
dist.manh[1:5,1:5 ]
dim(dist.manh)
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
train.labels <- c(train[, ncol(train)])
test.labels <- test[, ncol(test)]
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(ds.features)
knn.manh.1 <- knn.predict(train.samples, test.samples, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(knn.manh.1 == test$spam)/test.num))
knn.manh1[1:30]
knn.manh.1[1:30]
knn.manh.1[1:30,1]
dim(knn.manh.1)
length(knn.manh.1)
knn.manh.1[2]
knn.manh.1[2][1]
knn.manh.1[2][0]
knn.manh.1[2][2]
knn.manh.1[2][3]
knn.manh.1[2][1]
knn.manh.1 <- knn.predict(train.samples, test.samples, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(as.integer(knn.manh.1) == test$spam)/test.num))
as.integer(knn.manh.1[1:10])
# -------------------------------------
# Approach 3: Changing distance measure
# -------------------------------------
train.labels <- ds[train.samples, ncol(train)]
test.labels <- test[, ncol(test)]
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(ds.features)
knn.manh.1 <- knn.predict(train.samples, test.samples, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(as.integer(knn.manh.1) == test$spam)/test.num))
sum(as.integer(knn.manh.1))
sum(test$spam)
sum(as.integer(knn.manh.1) == test$spam)
dist.manh <- knn.dist(train.features)
train.features <- train[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(train.features)
knn.manh.1 <- knn.predict(train, test, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(as.integer(knn.manh.1) == test$spam)/test.num))
knn.manh.1 <- knn.predict(train, test, train.labels, dist.manh, k=5)
knn.manh.1 <- knn.predict(train, test, train.labels, dist.manh, k=5)
train.features <- train[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(train.features)
knn.manh.1 <- knn.predict(train, test, train.labels, dist.manh, k=1)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(as.integer(knn.manh.1) == test$spam)/test.num))
t
test.labels <- test[, ncol(test)]
ds.features <- ds[, seq(1, ncol(ds)-1, by=1)]
train.features <- train[, seq(1, ncol(ds)-1, by=1)]
dist.manh <- knn.dist(train.features)
knn.manh.1 <- knn.predict(train, test, train.labels, dist.manh, k=5)
print(paste("Accuracy on test set for knn.manh.1 = ",
sum(as.integer(knn.manh.1) == test$spam)/test.num))
